parameters:     #Prep tasks (e.g., setting variables, secrets, secure files)
  - name: environment
    displayName: Environment
    type: string
    default: 'dev'
    values:
      - dev
      - qa
      - prod

variables:
  - app_name: 'dnaportals'
    container_repo: 'developerhub/dnaportals'
    sonarlogin: ''
    inspec_test_folder: 'test/inspec' 
    # Implement 'Override test triggers' conditions if applicable etc.

resources:
  - repositories:  
      - repository: 'portal repo'
        type: git
        name: portal repo

stages: 
######################
##### Prepare ########

- stage: prepare
  displayName: 'Prepare'
  jobs:
    - template: #Name of template file (pipeline-template/prepare.yml)  That means reusable logic, DRY pipeline config, and easy updates
        parameters:
          appName: $(app_name)


######################
##### Build ########
##Compiles or bundles the app and pushes to a container repo
- stage: build
  displayName: 'Build Application'
  dependsOn: prepare
  condition: #Any conditions you want to implement e.g. if its a pull request/ manual, has prepare stage succeeded etc #
  jobs:
    - template: #Name of template file (pipeline-template/buildyml)
        parameters:
          containerRepo: 

######################
##### SonarQube ########
#Runs static code analysis and quality checks (SonarQube, Nexus IQ)
- stage: sonarqube
  displayName: 'SonarQube and Nexus IQ'
  dependsOn: 
    - prepare
    - build
  variables:  
 
  jobs:
    - template: #Name of template file (pipeline-template/sonarqube.yml)
        parameters:
          artifact_name:    


######################
##### CI ########
#Pushes containers to CI or Dev environments
- stage: deploy_ci
  displayName: 'Deploy to CI'
  dependsOn: 
    - prepare
    - build
    - sonarqube
  condition: #Conditions you want to implement (dependencies)
  variables:
    dockerTag: 
  jobs:
    - template: #Name of template file (pipeline-template/deploy.yml)
        parameters:
          environment: 'CI'
          dockerTag: $(dockerTag)

######################
##### DEV ########
#Pushes containers to CI or Dev environments
- stage: deploy_dev
  displayName: 'Deploy to Development'
  dependsOn: 
    - prepare
    - build
    - deploy_ci
  condition: #Conditions you want to implement (dependencies) (if deploy to ci was successful etc.)
  variables:
    dockerTag: 
  jobs:
    - template: #Name of template file (pipeline-template/deploy.yml)
        parameters:
          environment: 'Dev'
          dockerTag: $(dockerTag)    

######################
##### DEV UI Test Automation Pack ########
#Executes UI test automation (like our Playwright pack)
- stage: dev_UI_test_automation_pack
  displayName: 'Dev UI Automation Tests'
  dependsOn: 
    - prepare
    - build
    - deploy_ci
  condition: #If override test triggers is true etc. eq('${{variables.override_test_triggers}}', true)
  variables:
    dockerTag: 
  jobs:
    - template: #Name of template file (pipeline-template/UItests.yml)
        parameters:
          environment: 'Dev'
          cucumberFilterTags: ' '          

######################
##### DEV API Test Automation Pack ########


######################
##### QA ########

######################
##### Prod ########